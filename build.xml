<?xml version="1.0" encoding="UTF-8"?>
<!--
    Use this script with 'ant -f build.xml' or simply 'ant'.
-->
<project name="SSim Environment Demo" default="default" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>Builds the SSim Environment Demo.</description>
    
    <fail message="Please build using Ant 1.7.1 or higher.">
        <condition>
            <not>
                <antversion atleast="1.7.1"/>
            </not>
        </condition>
    </fail>
    
    <target name="default" depends="build" description="Builds the whole project"/>
    
    <target name="init">
        <property name="build.dir" value="bin"/>
        <property name="dist.dir" value="dist"/>
        <property name="dist.pass1.dir" value="${dist.dir}/pass1"/>
        <property name="misc.dir" value="misc"/>
        <property name="lib.dir" value="libs"/>
        <property name="src.dir" value="src"/>
        <property name="asset.dir" value="assets"/>
        
        <property name="pregen-log.file" value="pregen.log"/>
        
        <property file="build.properties"/>
        
        <path id="classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>
        <path id="classpath-build">
            <dirset dir="${build.dir}"/>
        </path>
    </target>

    <target name="resolve" depends="init" description="Retrieve dependencies">
        <mkdir dir="${lib.dir}"/>
        
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision]-[type].[ext]"/>
    </target>

    <target name="report" depends="init,resolve" description="Dependency report">
        <ivy:report xsl="true"
                outputpattern="${build.dir}/[organisation]-[module]-[conf]-report.[ext]"
                conf="default"
                organisation="de.mycrobase"
                module="ssim.ed"/>
    </target>
    
    <target name="build" depends="init,clean" description="Builds application">
        <mkdir dir="${build.dir}"/>
        
        <javac srcdir="${src.dir}"
               destdir="${build.dir}"
               debug="false"
               deprecation="true"
               optimize="true"
               includeAntRuntime="false">
            <classpath refid="classpath"/>
        </javac>
        
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}">
                <!-- ignore source code -->
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${asset.dir}" />
        </copy>
    </target>
    
    <target name="pre" depends="pre-terrain-lut,pre-terrain-atlas,pre-terrain-noise" description="Pre-generates assets">
        <echo>Pre-generation successful!</echo>
    </target>
    
    <target name="pre-terrain-lut" depends="build" description="Generates TerrainLUT.png">
        <java classname="de.mycrobase.ssim.ed.pre.TerrainLUTGenerator" failonerror="true" output="${pregen-log.file}">
            <arg value="assets/textures/TerrainLUT.png"/>
            <classpath refid="classpath"/>
            <classpath refid="classpath-build"/>
        </java>
    </target>
    
    <target name="pre-terrain-atlas" depends="build" description="Generates TerrainAtlas.png">
        <java classname="de.mycrobase.ssim.ed.pre.TerrainAtlasGenerator" failonerror="true" output="${pregen-log.file}">
            <arg value="assets/textures/TerrainAtlas.png"/>
        	<classpath refid="classpath"/>
            <classpath refid="classpath-build"/>
        </java>
    </target>
    
    <target name="pre-terrain-noise" depends="build" description="Generates TerrainNoise.png">
        <java classname="de.mycrobase.ssim.ed.pre.TileableNoiseGenerator" failonerror="true" output="${pregen-log.file}">
            <arg value="assets/textures/TerrainNoise.png"/>
            <classpath refid="classpath"/>
            <classpath refid="classpath-build"/>
        </java>
    </target>
    
    <target name="dist" depends="init,build,pre" description="Package application">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.pass1.dir}"/>
        
        <!--
            manifestclasspath uses the given jarfile to determine relative pathes
            to the inner <classpath>, therefore we pass in a dummy.jar to obtain
            pathes in the form "libs/foo.jar"
            (http://www.rgagnon.com/javadetails/java-0587.html)
        -->
        <manifestclasspath property="manifest.class-path" jarfile="dummy.jar" maxParentLevels="0">
            <classpath refid="classpath"/>
        </manifestclasspath>
        
        <jar jarfile="${dist.pass1.dir}/sed.jar" compress="false" strict="warn">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Main-Class" value="de.mycrobase.ssim.ed.Main"/>
                <attribute name="Class-Path" value="${manifest.class-path}"/>
                
                <attribute name="Implementation-Vendor" value="cn"/>
                <attribute name="Implementation-Title" value="SSim Environment Demo"/>
                <attribute name="Implementation-Version" value="0.0.1"/>
            </manifest>
        </jar>
        
        <zip destfile="${dist.dir}/sed.zip" duplicate="fail" compress="false">
            <!-- wrap into a subfolder for easier extraction -->
            <mappedresources>
                <union>
                    <!-- include everything from 1th pass -->
                    <fileset dir="${dist.pass1.dir}"/>
                    <!-- pull in all libs -->
                    <fileset dir="${basedir}">
                        <include name="${lib.dir}/**"/>
                    </fileset>
                </union>
                <globmapper from="*" to="sed/*"/>
            </mappedresources>
        </zip>
    </target>
    
    <target name="dist-osx" depends="dist" description="Package application into OSX .app bundle">
        <!-- only works on a mac! -->
        
        <copy file="${misc.dir}/Info.plist.stub" tofile="${dist.dir}/Info.plist"/>
        <replace file="${dist.dir}/Info.plist" failOnNoReplacements="true">
            <replacefilter token="${sed.info.name}" value="sed-0.0.1"/>
            <replacefilter token="${sed.info.id}" value="de.mycrobase.ssim.ed.Main"/>
            <replacefilter token="${sed.info.version}" value="0.0.1"/>
            <replacefilter token="${sed.info.mainclass}" value="de.mycrobase.ssim.ed.Main"/>
        </replace>
        
        <mkdir dir="${dist.dir}/sed.app"/>
        <mkdir dir="${dist.dir}/sed.app/Contents"/>
        <mkdir dir="${dist.dir}/sed.app/Contents/MacOS"/>
        <mkdir dir="${dist.dir}/sed.app/Contents/Resources"/>
        <mkdir dir="${dist.dir}/sed.app/Contents/Resources/Java"/>
        
        <copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub" todir="${dist.dir}/sed.app/Contents/MacOS"/>
        <exec executable="chmod">
            <arg value="+x"/>
            <arg value="${dist.dir}/sed.app/Contents/MacOS/JavaApplicationStub"/>
        </exec>
        
        <copy file="${dist.dir}/Info.plist" todir="${dist.dir}/sed.app/Contents"/>
        <copy file="${misc.dir}/GenericApp.icns" todir="${dist.dir}/sed.app/Contents/Resources"/>
        
        <copy todir="${dist.dir}/sed.app/Contents/Resources/Java">
            <!-- include everything from 1th pass -->
            <fileset dir="${dist.pass1.dir}"/>
            <!-- pull in all libs -->
            <fileset dir="${basedir}">
                <include name="${lib.dir}/**"/>
            </fileset>
        </copy>
        
        <exec executable="SetFile">
            <arg value="-a"/>
            <arg value="B"/>
            <arg value="${dist.dir}/sed.app"/>
        </exec>
        
        <!--
            <zip> does not preserve unix permissions like executable flag on
            Contents/MacOS/JavaApplicationStub which is necessary else an error
            is thrown on start (error -10810), so we use <tar> instead
        -->
        <!--<zip destfile="${dist.dir}/sed.app.zip" duplicate="fail" compress="false">
            <fileset dir="${dist.dir}">
                <include name="sed.app/**"/>
            </fileset>
        </zip>-->
        <tar destfile="${dist.dir}/sed.app.tar" basedir="${dist.dir}" includes="sed.app/**"/>
    </target>
    
    <target name="clean" depends="init" description="Removes build files">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
</project>
